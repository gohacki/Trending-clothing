This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-05T11:54:31.285Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  components/
    AdminAddItemPage.js
    Footer.js
    ItemCard.js
    ItemDetail.js
    Navbar.js
  lib/
    mongodb.js
    mongoose.js
    multerConfig.js
    runMiddleware.js
    withAdmin.js
  middleware/
    ensureAnonymousId.js
    ensureSessionId.js
    rateLimit.js
  models/
    Item.js
    User.js
    Vote.js
  pages/
    admin/
      add-item.js
      submissions.js
    api/
      admin/
        items/
          [id]/
            remove.js
          add.js
        submissions/
          [id]/
            [decision].js
          index.js
      auth/
        [...nextauth].js
        register.js
      items/
        [id]/
          hasVoted.js
          vote.js
        index.js
        submit.js
      wardrobe/
        [itemId].js
        index.js
    auth/
      signin.js
    item/
      [id].js
    _app.js
    about.js
    contact.js
    cookie-policy.js
    index.js
    privacy.js
    register.js
    submit.js
    terms.js
    wardrobe.js
  styles/
    globals.css
  utils/
    cookies.js
.eslintrc.json
.gitignore
jsconfig.json
next.config.mjs
package.json
postcss.config.js
postcss.config.mjs
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: src/components/AdminAddItemPage.js
================
// src/components/AdminAddItemPage.js

import { useState } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function AdminAddItemPage() {
  const { data: session, status } = useSession();
  const isLoading = status === 'loading';
  const router = useRouter();

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    affiliateLink: '',
    links: '',
    image: null,
    type: 'Shirt', // Default value
    gender: 'Unisex', // Default value
    price: 'Under $50', // Default value
    style: 'Casual', // Default value
  });

  const [error, setError] = useState('');

  const { name, description, affiliateLink, links, image, type, gender, price, style } = formData;

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      setFormData({ ...formData, image: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Front-end validation
    if (!name || !description || !affiliateLink || !links || !image || !type || !gender || !price || !style) {
      setError('All fields are required.');
      toast.error('All fields are required.');
      return;
    }

    const form = new FormData();
    form.append('name', name);
    form.append('description', description);
    form.append('affiliateLink', affiliateLink);
    form.append('links', links); // Comma-separated URLs
    form.append('image', image);
    form.append('type', type);
    form.append('gender', gender);
    form.append('price', price);
    form.append('style', style);

    try {
      const res = await fetch('/api/admin/items/add', {
        method: 'POST',
        body: form,
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || 'Something went wrong.');
        toast.error(data.message || 'Something went wrong.');
      } else {
        toast.success(data.message || 'Item added successfully!');
        // Reset form
        setFormData({
          name: '',
          description: '',
          affiliateLink: '',
          links: '',
          image: null,
          type: 'Shirt',
          gender: 'Unisex',
          price: 'Under $50',
          style: 'Casual',
        });
        // Redirect after a short delay
        setTimeout(() => {
          router.push('/admin/submissions');
        }, 2000);
      }
    } catch (err) {
      setError('Something went wrong.');
      toast.error('Something went wrong.');
    }
  };

  if (isLoading) {
    return <div className="text-center text-gray-300">Loading...</div>;
  }

  if (!session) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-dark-gradient">
        <p className="text-gray-300 mb-4">You must be signed in to access this page.</p>
        <Link href="/auth/signin">
          <a className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
            Sign In
          </a>
        </Link>
      </div>
    );
  }

  if (session.user.role !== 'admin') {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-dark-gradient">
        <p className="text-gray-300 mb-4">You do not have permission to access this page.</p>
        <Link href="/">
          <a className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg">
            Go Home
          </a>
        </Link>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Add Item | Trending Clothing</title>
      </Head>
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <div className="bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-filter backdrop-blur-md p-8 rounded-lg shadow-lg w-full max-w-lg transition-colors duration-300">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 text-center transition-colors duration-300">Add a New Item</h2>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <form onSubmit={handleSubmit} encType="multipart/form-data">
            {/* Item Name */}
            <div className="mb-4">
              <label htmlFor="name" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Item Name
              </label>
              <input
                type="text"
                name="name"
                id="name"
                value={name}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="Stylish Jacket"
                required
              />
            </div>

            {/* Description */}
            <div className="mb-4">
              <label htmlFor="description" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Description
              </label>
              <textarea
                name="description"
                id="description"
                value={description}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="Provide a detailed description of the item."
                rows="4"
                required
              ></textarea>
            </div>

            {/* Affiliate Link */}
            <div className="mb-4">
              <label htmlFor="affiliateLink" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Affiliate Link
              </label>
              <input
                type="url"
                name="affiliateLink"
                id="affiliateLink"
                value={affiliateLink}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="https://www.example.com/product"
                required
              />
            </div>

            {/* Purchase Links */}
            <div className="mb-4">
              <label htmlFor="links" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Purchase Links (comma-separated)
              </label>
              <input
                type="text"
                name="links"
                id="links"
                value={links}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="https://store1.com/item, https://store2.com/item"
                required
              />
            </div>

            {/* Type of Clothing */}
            <div className="mb-4">
              <label htmlFor="type" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Type of Clothing
              </label>
              <select
                name="type"
                id="type"
                value={type}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              >
                <option value="Shirt">Shirt</option>
                <option value="Pants">Pants</option>
                <option value="Jacket">Jacket</option>
                <option value="Dress">Dress</option>
                <option value="Shoes">Shoes</option>
                <option value="Accessories">Accessories</option>
              </select>
            </div>

            {/* Gender */}
            <div className="mb-4">
              <label htmlFor="gender" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Gender
              </label>
              <select
                name="gender"
                id="gender"
                value={gender}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              >
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Unisex">Unisex</option>
              </select>
            </div>

            {/* Price */}
            <div className="mb-4">
              <label htmlFor="price" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Price Range
              </label>
              <select
                name="price"
                id="price"
                value={price}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              >
                <option value="Under $50">Under $50</option>
                <option value="$50-$100">$50-$100</option>
                <option value="Over $100">Over $100</option>
              </select>
            </div>

            {/* Style */}
            <div className="mb-6">
              <label htmlFor="style" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Style
              </label>
              <select
                name="style"
                id="style"
                value={style}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              >
                <option value="Casual">Casual</option>
                <option value="Formal">Formal</option>
                <option value="Sport">Sport</option>
                <option value="Vintage">Vintage</option>
                <option value="Streetwear">Streetwear</option>
              </select>
            </div>

            {/* Image Upload */}
            <div className="mb-6">
              <label htmlFor="image" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Item Image
              </label>
              <input
                type="file"
                name="image"
                id="image"
                accept="image/*"
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              />
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full bg-green-500 dark:bg-green-700 hover:bg-green-600 dark:hover:bg-green-800 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300"
            >
              Add Item
            </button>
          </form>
          <ToastContainer />
        </div>
      </div>
    </>
  );
}

export default AdminAddItemPage;

================
File: src/components/Footer.js
================
// src/components/Footer.js

import Link from "next/link";

function Footer() {
  return (
    <footer className="w-full bg-white bg-opacity-20 backdrop-filter backdrop-blur-md p-4 mt-auto shadow-inner dark:bg-gray-800 dark:bg-opacity-80">
      <div className="max-w-6xl mx-auto flex flex-col md:flex-row justify-between items-center">
        {/* Logo or Site Name */}
        <div className="mb-4 md:mb-0">
          <h2 className="text-xl font-bold text-gray-800 dark:text-white">Trending Clothing</h2>
        </div>

        {/* Legal Links */}
        <div className="flex space-x-4">
          <Link href="/privacy" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
              Privacy Policy
          </Link>
          <Link href="/terms" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
              Terms of Service
          </Link>
          <Link href="/cookie-policy" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
              Cookie Policy
          </Link>
          <Link href="/contact" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
              Contact Us
          </Link>
        </div>
      </div>
      {/* Optional: Copyright */}
      <div className="mt-4 text-center text-gray-600 dark:text-gray-400">
        &copy; {new Date().getFullYear()} Trending Clothing. All rights reserved.
      </div>
    </footer>
  );
}

export default Footer;

================
File: src/components/ItemCard.js
================
// src/components/ItemCard.js

import { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import FingerprintJS from '@fingerprintjs/fingerprintjs';

function ItemCard({ item, searchTerm, wardrobeIds, rank }) { // Added 'rank' prop
  const { data: session, status } = useSession();
  const isAuthenticated = status === "authenticated";
  const [inWardrobe, setInWardrobe] = useState(isAuthenticated ? wardrobeIds.includes(item._id) : false);
  const [wardrobeLoading, setWardrobeLoading] = useState(false);
  const [votes, setVotes] = useState(item.votes);
  const [isVoting, setIsVoting] = useState(false);
  const [isLoading, setIsLoading] = useState(false); // For skeleton loader
  const [fingerprint, setFingerprint] = useState(null);
  const [hasVoted, setHasVoted] = useState(false); // Define hasVoted state

  useEffect(() => {
    // Initialize FingerprintJS
    FingerprintJS.load().then(fp => fp.get()).then(result => {
      setFingerprint(result.visitorId);
    });

    // Check if the user has already voted for this item
    const checkHasVoted = async () => {
      try {
        const res = await fetch(`/api/items/${item._id}/hasVoted`);
        const data = await res.json();
        if (res.ok) {
          setHasVoted(data.hasVoted);
        }
      } catch (error) {
        console.error("Error checking vote status:", error);
      }
    };

    checkHasVoted();
  }, [item._id]);

  const handleWardrobeToggle = async () => {
    if (!isAuthenticated) {
      toast.error("You must be signed in to manage your wardrobe.");
      return;
    }

    setWardrobeLoading(true);

    try {
      if (inWardrobe) {
        // Remove from wardrobe
        const res = await fetch(`/api/wardrobe/${item._id}`, {
          method: 'DELETE',
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(false);
          toast.success(data.message || 'Item removed from wardrobe.');
        } else {
          toast.error(data.message || 'Failed to remove item.');
        }
      } else {
        // Add to wardrobe
        const res = await fetch('/api/wardrobe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ itemId: item._id }),
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(true);
          toast.success(data.message || 'Item added to wardrobe.');
        } else {
          toast.error(data.message || 'Failed to add item.');
        }
      }
    } catch (error) {
      console.error("Error toggling wardrobe:", error);
      toast.error('An error occurred. Please try again.');
    } finally {
      setWardrobeLoading(false);
    }
  };

  const handleVote = async () => {
    if (isVoting || hasVoted) return;

    setIsVoting(true);

    try {
      const payload = {
        ...(isAuthenticated ? {} : { fingerprint }),
      };

      const res = await fetch(`/api/items/${item._id}/vote`, {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const { success, data, message } = await res.json();

      if (success) {
        setVotes(data.votes);
        setHasVoted(true); // Update hasVoted state
        toast.success('Vote registered successfully!');
      } else {
        toast.error(message || 'Failed to vote.');
      }
    } catch (error) {
      console.error("Error voting:", error);
      toast.error("An error occurred while voting. Please try again.");
    } finally {
      setIsVoting(false);
    }
  };

  // Render skeleton if loading
  if (isLoading) {
    return (
      <div className="item-card flex flex-col md:flex-row items-center bg-white bg-opacity-10 backdrop-filter backdrop-blur-md shadow-lg rounded-lg p-6 mb-6 w-full max-w-4xl">
        <div className="relative w-full md:w-1/3 h-48 flex-shrink-0">
          <Skeleton height="100%" width="100%" />
        </div>
        <div className="mt-4 md:mt-0 md:ml-6 flex-grow">
          <Skeleton height={30} width="80%" />
          <Skeleton count={2} className="mt-2" />
          <div className="mt-4 flex flex-wrap items-center space-x-4">
            <Skeleton height={40} width={100} />
            <Skeleton height={40} width={100} />
            <Skeleton height={40} width={100} />
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <Link href={`/item/${item._id}`} className="item-card flex flex-col md:flex-row items-center bg-white bg-opacity-10 backdrop-filter backdrop-blur-md shadow-lg rounded-lg p-6 mb-6 w-full max-w-4xl transform transition duration-300 hover:scale-105 hover:shadow-2xl dark:bg-gray-700">
        {/* Rank */}
        <div className="rank mr-0 md:mr-4 text-2xl font-bold text-yellow-400">
          {rank}
        </div>

        {/* Item Image */}
        <div className="relative w-full md:w-1/3 h-48 flex-shrink-0 rounded-lg overflow-hidden">
          <Image
            src={item.image} // CDN URL
            alt={item.name}
            layout="fill"
            objectFit="cover"
            className="rounded-lg"
          />
        </div>

        {/* Item Details */}
        <div className="mt-4 md:mt-0 md:ml-6 flex-grow">
          <Link href={`/item/${item._id}`} className="text-2xl font-semibold text-gray-800 dark:text-white hover:underline">
              {searchTerm ? (
                <HighlightText text={item.name} highlight={searchTerm} />
              ) : (
                item.name
              )}
          </Link>
          <p className="text-gray-600 dark:text-gray-300 mt-2">{item.description}</p>
          <div className="mt-4 flex flex-wrap items-center space-x-4">
            {/* Upvote Button and Vote Count */}
            <div className="flex items-center">
              <button
                onClick={handleVote}
                disabled={isVoting || hasVoted}
                className={`bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-400 transition-colors duration-200 ${
                  (isVoting || hasVoted) ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
                }`}
                aria-label={isVoting ? "Voting" : hasVoted ? "Voted" : "Upvote"}
              >
                {isVoting ? "Voting..." : hasVoted ? "Voted" : "Upvote"}
              </button>
              <span className="ml-3 text-lg text-gray-700 dark:text-gray-300">{votes} votes</span>
            </div>

            {/* Buy Now Button */}
            <a
              href={item.affiliateLink}
              target="_blank"
              rel="noopener noreferrer"
              className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
            >
              Buy Now
            </a>

            {/* Wardrobe Button */}
            <button
              onClick={handleWardrobeToggle}
              disabled={wardrobeLoading}
              className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition-colors duration-200 ${
                wardrobeLoading ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
              }`}
              aria-label={inWardrobe ? "Remove from Wardrobe" : "Add to Wardrobe"}
            >
              {wardrobeLoading ? "Processing..." : inWardrobe ? "Remove" : "Add"}
            </button>
          </div>
        </div>

        {/* Votes Count on the Right */}
        <div className="votes mt-4 md:mt-0 ml-0 md:ml-4 text-3xl font-bold text-red-500">
          {votes}
        </div>
        
        </Link>
      <ToastContainer />
    </>
  );
}

// Component to highlight search terms
function HighlightText({ text, highlight }) {
  if (!highlight) return text;

  const regex = new RegExp(`(${highlight})`, 'gi');
  const parts = text.split(regex);

  return (
    <>
      {parts.map((part, i) =>
        part.toLowerCase() === highlight.toLowerCase() ? (
          <span key={i} className="bg-yellow-300 text-black">
            {part}
          </span>
        ) : (
          part
        )
      )}
    </>
  );
}

export default ItemCard;

================
File: src/components/ItemDetail.js
================
// src/pages/item/[id].js

import FingerprintJS from '@fingerprintjs/fingerprintjs';
import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Image from "next/image";
import dbConnect from "../../lib/mongoose";
import Item from "../../models/Item";
import Head from "next/head";
import Link from "next/link";
import { ToastContainer, toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

function ItemDetailPage({ item }) {
  const router = useRouter();
  const { data: session, status } = useSession();
  const isAuthenticated = status === "authenticated";
  const [inWardrobe, setInWardrobe] = useState(false);
  const [wardrobeLoading, setWardrobeLoading] = useState(false);
  const [votes, setVotes] = useState(item.votes);
  const [isVoting, setIsVoting] = useState(false);
  const [fingerprint, setFingerprint] = useState(null);

  useEffect(() => {
    if (isAuthenticated) {
      // Fetch the user's wardrobe to check if the item is already there
      const fetchWardrobe = async () => {
        try {
          const res = await fetch('/api/wardrobe');
          const data = await res.json();
          if (res.ok) {
            const wardrobeIds = data.data.map(wItem => wItem._id);
            setInWardrobe(wardrobeIds.includes(item._id));
          }
        } catch (error) {
          console.error("Error fetching wardrobe:", error);
        }
      };
      fetchWardrobe();
    } else {
      // For unauthenticated users, you might skip wardrobe functionality
      setInWardrobe(false);
    }

    // Initialize FingerprintJS
    FingerprintJS.load().then(fp => fp.get()).then(result => {
      setFingerprint(result.visitorId);
    });
  }, [isAuthenticated, item._id]);

  const handleWardrobeToggle = async () => {
    if (!isAuthenticated) {
      toast.error("You must be signed in to manage your wardrobe.");
      return;
    }

    setWardrobeLoading(true);

    try {
      if (inWardrobe) {
        // Remove from wardrobe
        const res = await fetch(`/api/wardrobe/${item._id}`, {
          method: 'DELETE',
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(false);
          toast.success(data.message || 'Item removed from wardrobe.');
        } else {
          toast.error(data.message || 'Failed to remove item.');
        }
      } else {
        // Add to wardrobe
        const res = await fetch('/api/wardrobe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ itemId: item._id }),
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(true);
          toast.success(data.message || 'Item added to wardrobe.');
        } else {
          toast.error(data.message || 'Failed to add item.');
        }
      }
    } catch (error) {
      console.error("Error toggling wardrobe:", error);
      toast.error('An error occurred. Please try again.');
    } finally {
      setWardrobeLoading(false);
    }
  };

  const handleVote = async () => {
    if (isVoting) return;

    setIsVoting(true);

    try {
      const payload = {
        ...(isAuthenticated ? {} : { fingerprint }),
      };

      const res = await fetch(`/api/items/${item._id}/vote`, {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const { success, data, message } = await res.json();

      if (success) {
        setVotes(data.votes);
        toast.success('Vote registered successfully!');
      } else {
        toast.error(message || 'Failed to vote.');
      }
    } catch (error) {
      console.error("Error voting:", error);
      toast.error("An error occurred while voting. Please try again.");
    } finally {
      setIsVoting(false);
    }
  };

  if (!item) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-dark-gradient text-gray-300">
        <p className="text-xl mb-4">Item not found</p>
        <button
          onClick={() => router.push("/")}
          className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg"
        >
          Go Back Home
        </button>
      </div>
    );
  }

  const handleBack = () => {
    router.back();
  };

  return (
    <>
      <Head>
        <title>{item.name} | Trending Clothing</title>
        <meta name="description" content={item.description} />
      </Head>
      <div className="item-detail-page max-w-3xl mx-auto p-4">
        {/* Back Button */}
        <button
          onClick={handleBack}
          className="mb-4 text-blue-500 hover:text-blue-700 underline"
        >
          &larr; Back
        </button>

        <h1 className="text-3xl font-bold mb-4">{item.name}</h1>
        <div className="relative w-full h-96 mb-4">
          <Image
            src={item.image}
            alt={item.name}
            fill
            className="object-cover rounded"
            sizes="(max-width: 768px) 100vw,
                  (max-width: 1200px) 50vw,
                  33vw"
            priority // Ensures this image loads quickly
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/fallback-image.png';
            }}
          />
        </div>
        <p className="text-gray-300 mb-4">{votes} votes</p>
        {/* Affiliate link */}
        <a
          href={item.affiliateLink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-400 hover:text-blue-600 underline"
        >
          Buy Now
        </a>

        {/* Vote Button */}
        <div className="mt-4">
          <button
            onClick={handleVote}
            disabled={isVoting}
            className={`bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors duration-200 ${
              isVoting ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
            }`}
            aria-label={isVoting ? "Voting" : "Upvote"}
          >
            {isVoting ? "Voting..." : "Upvote"}
          </button>
          <span className="ml-3 text-lg text-gray-300">{votes} votes</span>
        </div>

        {/* Wardrobe Button */}
        <div className="mt-4">
          <button
            onClick={handleWardrobeToggle}
            disabled={wardrobeLoading}
            className={`bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200 ${
              wardrobeLoading ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
            }`}
            aria-label={inWardrobe ? "Remove from Wardrobe" : "Add to Wardrobe"}
          >
            {wardrobeLoading ? "Processing..." : inWardrobe ? "Remove from Wardrobe" : "Add to Wardrobe"}
          </button>
        </div>
        <ToastContainer />
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const { id } = context.params;

  await dbConnect();

  try {
    const item = await Item.findById(id).lean();

    if (!item) {
      return {
        props: { item: null },
      };
    }

    // Convert Mongoose _id and Date fields to strings
    item._id = item._id.toString();
    item.createdAt = item.createdAt.toISOString();
    item.updatedAt = item.updatedAt.toISOString();
    // Repeat for any other Date fields if present

    return {
      props: { item },
    };
  } catch (error) {
    console.error("Error fetching item:", error);
    return {
      props: { item: null },
    };
  }
}

export default ItemDetailPage;

================
File: src/components/Navbar.js
================
// src/components/Navbar.js

import { signIn, signOut, useSession } from "next-auth/react";
import Link from "next/link";
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

function Navbar() {
  const { data: session, status } = useSession();
  const isLoading = status === "loading";
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null; // Prevents hydration mismatch

  return (
    <nav className="w-full bg-white bg-opacity-20 backdrop-filter backdrop-blur-md p-4 flex justify-between items-center shadow-md dark:bg-gray-800 dark:bg-opacity-80">
      <Link href="/">
        <h1 className="text-3xl font-bold text-gray-800 dark:text-white">Trending Clothing</h1>
      </Link>
      <div className="flex items-center space-x-4">
        {/* Dark Mode Toggle */}
        <button
          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
          className="text-gray-800 dark:text-gray-200 hover:text-gray-600 dark:hover:text-gray-400 transition-colors duration-200 focus:outline-none"
          aria-label="Toggle Dark Mode"
        >
          {theme === 'dark' ? '🌞' : '🌙'}
        </button>
        {session && (
          <>
            <Link href="/submit" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
                Submit Item
            </Link>
            <Link href="/wardrobe" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
                My Wardrobe
            </Link>
            {session.user.role === "admin" && (
              <>
                <Link href="/admin/submissions" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
                    Admin Submissions
                </Link>
                <Link href="/admin/add-item" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
                    Add Item
                </Link>
              </>
            )}
          </>
        )}

        {!isLoading && !session && (
          <>
            <Link href="/auth/signin" className="text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200">
                Sign In
            </Link>
            <Link href="/register" className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
                Register
            </Link>
          </>
        )}

        {!isLoading && session && (
          <div className="flex items-center space-x-4">
            <span className="text-gray-800 dark:text-gray-200">Hello, {session.user.name}</span>
            <button
              onClick={() => signOut()}
              className= "text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200"
            >
              Sign Out
            </button>
          </div>
        )}
      </div>
    </nav>
  );
}

export default Navbar;

================
File: src/lib/mongodb.js
================
// src/lib/mongodb.js

import { MongoClient } from 'mongodb';

const uri = process.env.MONGODB_URI; // Ensure this is set in your .env.local
const options = {};

let client;
let clientPromise;

if (!process.env.MONGODB_URI) {
  throw new Error('Please add your Mongo URI to .env.local');
}

if (process.env.NODE_ENV === 'development') {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  if (!global._mongoClientPromise) {
    client = new MongoClient(uri, options);
    global._mongoClientPromise = client.connect();
  }
  clientPromise = global._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

// Export a module-scoped MongoClient promise. By doing this in a separate
// module, the client can be shared across functions.
export default clientPromise;

================
File: src/lib/mongoose.js
================
// src/lib/mongoose.js

import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    "Please define the MONGODB_URI environment variable inside .env.local"
  );
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectToDatabase() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }
  cached.conn = await cached.promise;
  return cached.conn;
}

export default connectToDatabase;

================
File: src/lib/multerConfig.js
================
// src/lib/multerConfig.js

import multer from 'multer';

export const upload = multer({
  storage: multer.memoryStorage(), // Store files in memory temporarily
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB file size limit
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png|gif/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(file.originalname.toLowerCase());

    if (mimetype && extname) {
      return cb(null, true);
    }
    cb(new Error('Only images are allowed!'));
  },
});

================
File: src/lib/runMiddleware.js
================
// src/lib/runMiddleware.js

export function runMiddleware(req, res, fn) {
  return new Promise((resolve, reject) => {
    fn(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });
}

================
File: src/lib/withAdmin.js
================
// src/lib/withAdmin.js

import { getSession } from 'next-auth/react';

export function withAdmin(handler) {
  return async (req, res) => {
    const session = await getSession({ req });

    if (!session) {
      return res.status(401).json({ success: false, message: 'Unauthorized' });
    }

    // Fetch user from database to check role
    const db = await import('../lib/mongoose').then((mod) => mod.default());
    const User = (await import('../models/User')).default;
    const user = await User.findById(session.user.id);

    if (!user || user.role !== 'admin') {
      return res.status(403).json({ success: false, message: 'Forbidden: Admins only' });
    }

    return handler(req, res);
  };
}

================
File: src/middleware/ensureAnonymousId.js
================
// src/middleware/ensureAnonymousId.js

import { v4 as uuidv4 } from 'uuid';
import { getCookies, setCookie } from '../utils/cookies';

export async function ensureAnonymousId(req, res) {
  const cookies = getCookies(req);
  let anonymousId = cookies.anonymousId;

  if (!anonymousId) {
    anonymousId = uuidv4();
    // Set cookie to expire in 1 year
    setCookie(res, 'anonymousId', anonymousId, { maxAge: 60 * 60 * 24 * 365, httpOnly: true, sameSite: 'strict' });
  }

  return anonymousId;
}

================
File: src/middleware/ensureSessionId.js
================
// src/middleware/ensureSessionId.js

import { v4 as uuidv4 } from 'uuid';
import { getCookies, setCookie } from '../utils/cookies';

export async function ensureSessionId(req, res) {
  const cookies = getCookies(req);
  let sessionId = cookies.sessionId;

  if (!sessionId) {
    sessionId = uuidv4();
    // Set cookie to expire in 1 year
    setCookie(res, 'sessionId', sessionId, { maxAge: 60 * 60 * 24 * 365, httpOnly: true, sameSite: 'strict' });
  }

  return sessionId;
}

================
File: src/middleware/rateLimit.js
================
// src/middleware/rateLimit.js

const rateLimitMap = new Map();

export function rateLimiter(options) {
  const { windowMs, max, message } = options;

  return async (req, res, next) => {
    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    const now = Date.now();
    const windowStart = now - windowMs;

    if (!rateLimitMap.has(ip)) {
      rateLimitMap.set(ip, []);
    }

    const timestamps = rateLimitMap.get(ip).filter(timestamp => timestamp > windowStart);
    timestamps.push(now);
    rateLimitMap.set(ip, timestamps);

    if (timestamps.length > max) {
      res.status(429).json({ success: false, message });
      return;
    }

    next();
  };
}

================
File: src/models/Item.js
================
// src/models/Item.js

import mongoose from 'mongoose';

const ItemSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, 'Please provide a name for the item.'],
      unique: true,
      trim: true,
    },
    description: {
      type: String,
      required: [true, 'Please provide a description for the item.'],
      trim: true,
    },
    image: {
      type: String,
      required: [true, 'Please provide an image URL for the item.'],
    },
    links: {
      type: [String],
      required: [true, 'Please provide at least one purchase link.'],
      validate: {
        validator: function (v) {
          return v.length > 0;
        },
        message: 'At least one purchase link is required.',
      },
    },
    votes: {
      type: Number,
      default: 0,
    },
    affiliateLink: {
      type: String,
      // affiliateLink is now optional for user submissions
    },
    status: {
      type: String,
      enum: ['pending', 'approved', 'rejected'],
      default: 'pending',
    },
    // **New Fields**
    type: {
      type: String,
      enum: ['Shirt', 'Pants', 'Jacket', 'Dress', 'Shoes', 'Accessories'],
      required: [true, 'Please specify the type of clothing.'],
    },
    gender: {
      type: String,
      enum: ['Male', 'Female', 'Unisex'],
      required: [true, 'Please specify the gender.'],
    },
    price: {
      type: String,
      enum: ['Under $50', '$50-$100', 'Over $100'],
      required: [true, 'Please specify the price range.'],
    },
    style: {
      type: String,
      enum: ['Casual', 'Formal', 'Sport', 'Vintage', 'Streetwear'],
      required: [true, 'Please specify the style.'],
    },
  },
  { timestamps: true }
);

// Prevent model overwrite upon initial compile
export default mongoose.models.Item || mongoose.model('Item', ItemSchema);

================
File: src/models/User.js
================
// src/models/User.js

import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      required: [true, 'Please provide a username.'],
      unique: true,
      trim: true,
    },
    email: {
      type: String,
      required: [true, 'Please provide an email.'],
      unique: true,
      trim: true,
      lowercase: true,
    },
    password: {
      type: String,
      required: [true, 'Please provide a password.'],
    },
    role: {
      type: String,
      enum: ['user', 'admin'],
      default: 'user',
    },
    image: {
      type: String,
      default: '',
    },
    wardrobe: {
      type: [
        {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'Item',
        },
      ],
      default: [], // Ensure wardrobe is always an array
    },
    // Add other fields as needed
  },
  { timestamps: true }
);

// Prevent model overwrite upon initial compile
export default mongoose.models.User || mongoose.model('User', UserSchema);

================
File: src/models/Vote.js
================
// src/models/Vote.js

import mongoose from "mongoose";

const VoteSchema = new mongoose.Schema(
  {
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      // Optional: Only for authenticated users
    },
    anonymousId: {
      type: String,
      // Optional: Only for unauthenticated users
    },
    sessionId: {
      type: String,
      // Optional: For session tracking
    },
    fingerprint: {
      type: String,
      // Optional: For device fingerprinting
    },
    item: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Item",
      required: true,
    },
    week: {
      type: Number,
      required: true,
    },
    ipAddress: {
      type: String,
      required: true,
    },
  },
  { timestamps: true }
);

// Unique index for authenticated users
VoteSchema.index({ user: 1, week: 1, item: 1 }, { unique: true, sparse: true });

// Unique index for anonymous users based on anonymousId, week, and item
VoteSchema.index({ anonymousId: 1, week: 1, item: 1 }, { unique: true, sparse: true });

// Unique index for IP address per item per week
VoteSchema.index({ ipAddress: 1, week: 1, item: 1 }, { unique: true, sparse: true });

// Unique index for fingerprint per item per week
VoteSchema.index({ fingerprint: 1, week: 1, item: 1 }, { unique: true, sparse: true });

export default mongoose.models.Vote || mongoose.model("Vote", VoteSchema);

================
File: src/pages/admin/add-item.js
================
// src/pages/admin/add-item.js

import { getSession } from 'next-auth/react';
import AdminAddItemPage from '../../components/AdminAddItemPage'; // Assuming you refactor the page component
// Or keep the component as defined earlier and use a higher-order component or server-side checks

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (!session || session.user.role !== 'admin') {
    return {
      redirect: {
        destination: '/auth/signin',
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}

export default AdminAddItemPage;

================
File: src/pages/admin/submissions.js
================
// src/pages/admin/submissions.js

import { useEffect, useState } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Image from 'next/image';

function AdminSubmissionsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const isLoading = status === 'loading';
  const [submissions, setSubmissions] = useState([]);

  useEffect(() => {
    if (!isLoading) {
      if (!session) {
        router.push('/auth/signin');
      } else if (session.user.role !== 'admin') {
        router.push('/');
      } else {
        fetchSubmissions();
      }
    }
  }, [isLoading, session, router]);

  const fetchSubmissions = async () => {
    try {
      const res = await fetch('/api/admin/submissions');
      const data = await res.json();

      if (res.ok) {
        setSubmissions(data.data);
      } else {
        toast.error(data.message || 'Failed to fetch submissions.');
      }
    } catch (error) {
      toast.error('An error occurred while fetching submissions.');
    }
  };

  const handleDecision = async (itemId, decision) => {
    try {
      let affiliateLink = '';
      let type = '';
      let gender = '';
      let price = '';
      let style = '';

      if (decision === 'approve') {
        // Prompt admin for affiliate link and new fields
        affiliateLink = prompt('Please enter the affiliate link for this item:');
        if (!affiliateLink) {
          toast.error('Affiliate link is required to approve the item.');
          return;
        }

        type = prompt('Enter the type of clothing (Shirt, Pants, Jacket, Dress, Shoes, Accessories):');
        if (!['Shirt', 'Pants', 'Jacket', 'Dress', 'Shoes', 'Accessories'].includes(type)) {
          toast.error('Invalid type of clothing.');
          return;
        }

        gender = prompt('Enter the gender (Male, Female, Unisex):');
        if (!['Male', 'Female', 'Unisex'].includes(gender)) {
          toast.error('Invalid gender.');
          return;
        }

        price = prompt('Enter the price range (Under $50, $50-$100, Over $100):');
        if (!['Under $50', '$50-$100', 'Over $100'].includes(price)) {
          toast.error('Invalid price range.');
          return;
        }

        style = prompt('Enter the style (Casual, Formal, Sport, Vintage, Streetwear):');
        if (!['Casual', 'Formal', 'Sport', 'Vintage', 'Streetwear'].includes(style)) {
          toast.error('Invalid style.');
          return;
        }
      }

      const body = decision === 'approve' ? { affiliateLink, type, gender, price, style } : {};

      const res = await fetch(`/api/admin/submissions/${itemId}/${decision}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();

      if (res.ok) {
        toast.success(`Item ${decision}d successfully!`);
        // Remove the item from the list
        setSubmissions(submissions.filter((item) => item._id !== itemId));
      } else {
        toast.error(data.message || `Failed to ${decision} item.`);
      }
    } catch (error) {
      toast.error(`An error occurred while trying to ${decision} the item.`);
    }
  };

  const handleRemove = async (itemId) => {
    if (!confirm('Are you sure you want to remove this item? This action cannot be undone.')) {
      return;
    }

    try {
      const res = await fetch(`/api/admin/items/${itemId}/remove`, {
        method: 'DELETE',
      });

      const data = await res.json();

      if (res.ok) {
        toast.success('Item removed successfully!');
        // Remove the item from the list
        setSubmissions(submissions.filter((item) => item._id !== itemId));
      } else {
        toast.error(data.message || 'Failed to remove item.');
      }
    } catch (error) {
      toast.error('An error occurred while removing the item.');
    }
  };

  if (isLoading) {
    return <div className="text-center text-gray-300">Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Admin - Review Submissions | Trending Clothing</title>
      </Head>
      <div className="admin-submissions-page flex flex-col items-center p-4 min-h-screen">
        <h1 className="text-3xl font-bold mb-6 text-white">Pending Item Submissions</h1>
        <Link href="/admin/add-item" className="mb-6 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg">
            Add New Item
        </Link>
        {submissions.length > 0 ? (
          submissions.map((item) => (
            <div key={item._id} className="submission-card flex items-center bg-white bg-opacity-10 backdrop-filter backdrop-blur-md shadow-md rounded p-4 mb-4 w-full max-w-4xl transition-colors duration-300 dark:bg-gray-700">
              {/* Item Image */}
              <div className="relative w-24 h-24 flex-shrink-0 rounded-lg overflow-hidden">
                <Image src={item.image} alt={item.name} fill className="rounded object-cover" />
              </div>

              {/* Item Details */}
              <div className="ml-4 flex-grow">
                <h2 className="text-xl font-semibold text-white">{item.name}</h2>
                <p className="text-gray-300">{item.description}</p>
                <p className="text-gray-300">Purchase Links:</p>
                <ul className="list-disc list-inside text-gray-300">
                  {item.links.map((link, index) => (
                    <li key={index}>
                      <a href={link} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-600 underline">
                        {link}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Actions */}
              <div className="flex flex-col space-y-2">
                <button
                  onClick={() => handleDecision(item._id, 'approve')}
                  className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
                >
                  Approve
                </button>
                <button
                  onClick={() => handleDecision(item._id, 'reject')}
                  className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
                >
                  Reject
                </button>
                {/* Remove Button */}
                <button
                  onClick={() => handleRemove(item._id)}
                  className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
                >
                  Remove
                </button>
              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-300">No pending submissions.</p>
        )}
        <ToastContainer />
      </div>
    </>
  );
}

export default AdminSubmissionsPage;

================
File: src/pages/api/admin/items/[id]/remove.js
================
// src/pages/api/admin/items/[id]/remove.js

import dbConnect from '../../../../lib/mongoose';
import Item from '../../../../models/Item';
import { getServerSession } from "next-auth/next";
import { authOptions } from "../../../api/auth/[...nextauth]";
import { rateLimiter } from '../../../../middleware/rateLimit';
import { runMiddleware } from '../../../../lib/runMiddleware';
import { S3Client, DeleteObjectCommand } from '@aws-sdk/client-s3';
import path from 'path';

export default async function handler(req, res) {
  // Apply Rate Limiting
  await runMiddleware(req, res, rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes.',
  }));

  const { id } = req.query;

  if (req.method !== 'DELETE') {
    res.setHeader('Allow', ['DELETE']);
    res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
    return;
  }

  try {
    // Get user session
    const session = await getServerSession(req, res, authOptions);

    if (!session) {
      res.status(401).json({ success: false, message: 'Unauthorized' });
      return;
    }

    if (session.user.role !== 'admin') {
      res.status(403).json({ success: false, message: 'Forbidden: Admins only.' });
      return;
    }

    // Connect to MongoDB
    await dbConnect();

    // Find the item by ID
    const item = await Item.findById(id);

    if (!item) {
      res.status(404).json({ success: false, message: 'Item not found.' });
      return;
    }

    // Extract the image path from the URL
    const imageUrl = item.image;
    const spaceUrl = process.env.NEXT_PUBLIC_DO_CDN_URL; // e.g., https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com
    const imagePath = imageUrl.replace(spaceUrl + '/', ''); // e.g., clothing-app/unique-id.png

    // Initialize S3 client for DigitalOcean Spaces
    const s3 = new S3Client({
      region: process.env.DO_SPACE_REGION,
      endpoint: process.env.DO_SPACE_ENDPOINT, // e.g., https://nyc3.digitaloceanspaces.com
      credentials: {
        accessKeyId: process.env.DO_SPACE_ACCESS_KEY_ID,
        secretAccessKey: process.env.DO_SPACE_SECRET_ACCESS_KEY,
      },
    });

    // Delete the image from DigitalOcean Space
    const deleteParams = {
      Bucket: process.env.DO_SPACE_NAME,
      Key: imagePath,
    };

    await s3.send(new DeleteObjectCommand(deleteParams));

    // Remove the item from the database
    await Item.deleteOne({ _id: id });

    res.status(200).json({ success: true, message: 'Item removed successfully.' });
  } catch (error) {
    console.error('Error in admin remove item API:', error);
    res.status(400).json({ success: false, message: error.message });
  }
}

================
File: src/pages/api/admin/items/add.js
================
// src/pages/api/admin/items/add.js

import dbConnect from '../../../../lib/mongoose';
import Item from '../../../../models/Item';
import { withAdmin } from '../../../../lib/withAdmin';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { rateLimiter } from '../../../../middleware/rateLimit';
import { runMiddleware } from '../../../../lib/runMiddleware';
import { upload } from '../../../../lib/multerConfig';

export const config = {
  api: {
    bodyParser: false, // Disables Next.js's default body parser
  },
};

async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
  }

  // Apply Rate Limiting
  await runMiddleware(req, res, rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes.',
  }));

  // Apply Multer Middleware
  await runMiddleware(req, res, upload.single('image'));

  try {
    const { name, description, affiliateLink, links, type, gender, price, style } = req.body;
    const file = req.file;

    // Validate input
    if (!name || !description || !affiliateLink || !links || !file || !type || !gender || !price || !style) {
      return res.status(400).json({ success: false, message: 'All fields are required.' });
    }

    // Parse links (assuming comma-separated)
    const linksArray = links.split(',').map(link => link.trim()).filter(link => link);

    if (linksArray.length === 0) {
      return res.status(400).json({ success: false, message: 'At least one purchase link is required.' });
    }

    // Initialize S3 client for DigitalOcean Spaces
    const s3 = new S3Client({
      region: process.env.DO_SPACE_REGION,
      endpoint: process.env.DO_SPACE_ENDPOINT, // e.g., https://nyc3.digitaloceanspaces.com
      credentials: {
        accessKeyId: process.env.DO_SPACE_ACCESS_KEY_ID,
        secretAccessKey: process.env.DO_SPACE_SECRET_ACCESS_KEY,
      },
    });

    // Generate a unique filename
    const fileExtension = path.extname(file.originalname);
    const uniqueFileName = `clothing-app/${uuidv4()}${fileExtension}`;

    // Upload to DigitalOcean Space
    const uploadParams = {
      Bucket: process.env.DO_SPACE_NAME,
      Key: uniqueFileName,
      Body: file.buffer,
      ContentType: file.mimetype,
      ACL: 'public-read', // Makes the file publicly readable
    };

    await s3.send(new PutObjectCommand(uploadParams));

    // Construct the CDN URL
    const imageUrl = `${process.env.NEXT_PUBLIC_DO_CDN_URL}/${uniqueFileName}`;

    // Create new item with status 'approved' since admin is adding it directly
    const newItem = await Item.create({
      name,
      description,
      image: imageUrl,
      links: linksArray,
      affiliateLink,
      status: 'approved',
      type,
      gender,
      price,
      style,
    });

    return res.status(201).json({
      success: true,
      data: newItem,
      message: 'Item added successfully!',
    });
  } catch (error) {
    console.error('Error in admin add item API:', error);
    return res.status(400).json({ success: false, message: error.message });
  }
}

export default withAdmin(handler);

================
File: src/pages/api/admin/submissions/[id]/[decision].js
================
// src/pages/api/admin/submissions/[id]/[decision].js

import dbConnect from '../../../../../../lib/mongoose';
import Item from '../../../../../../models/Item';
import { withAdmin } from '../../../../../../lib/withAdmin';
import { rateLimiter } from '../../../../../../middleware/rateLimit';
import { runMiddleware } from '../../../../../../lib/runMiddleware';

export default withAdmin(async function handler(req, res) {
  const { id, decision } = req.query;

  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
  }

  // Apply Rate Limiting
  await runMiddleware(req, res, rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes.',
  }));

  // Decision Validation
  if (!['approve', 'reject'].includes(decision)) {
    return res.status(400).json({ success: false, message: 'Invalid decision.' });
  }

  try {
    const item = await Item.findById(id);

    if (!item) {
      return res.status(404).json({ success: false, message: 'Item not found.' });
    }

    if (item.status !== 'pending') {
      return res.status(400).json({ success: false, message: `Item is already ${item.status}.` });
    }

    if (decision === 'approve') {
      const { affiliateLink, type, gender, price, style } = req.body;

      if (!affiliateLink || !type || !gender || !price || !style) {
        return res.status(400).json({ success: false, message: 'All fields are required to approve the item.' });
      }

      // Validate affiliateLink (basic URL validation)
      const urlPattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
        '((([a-zA-Z\\d]([a-zA-Z\\d-]*[a-zA-Z\\d])*)\\.)+[a-zA-Z]{2,})'+ // domain name
        '(\\:\\d+)?(\\/[-a-zA-Z\\d%@_.~+&:]*)*'+ // port and path
        '(\\?[;&a-zA-Z\\d%@_.,~+&:=-]*)?'+ // query string
        '(\\#[-a-zA-Z\\d_]*)?$','i');
      
      if (!urlPattern.test(affiliateLink)) {
        return res.status(400).json({ success: false, message: 'Invalid affiliate link URL.' });
      }

      // Validate enumerated fields
      const validTypes = ['Shirt', 'Pants', 'Jacket', 'Dress', 'Shoes', 'Accessories'];
      const validGenders = ['Male', 'Female', 'Unisex'];
      const validPrices = ['Under $50', '$50-$100', 'Over $100'];
      const validStyles = ['Casual', 'Formal', 'Sport', 'Vintage', 'Streetwear'];

      if (!validTypes.includes(type)) {
        return res.status(400).json({ success: false, message: 'Invalid type of clothing.' });
      }

      if (!validGenders.includes(gender)) {
        return res.status(400).json({ success: false, message: 'Invalid gender.' });
      }

      if (!validPrices.includes(price)) {
        return res.status(400).json({ success: false, message: 'Invalid price range.' });
      }

      if (!validStyles.includes(style)) {
        return res.status(400).json({ success: false, message: 'Invalid style.' });
      }

      // Update item fields
      item.affiliateLink = affiliateLink;
      item.type = type;
      item.gender = gender;
      item.price = price;
      item.style = style;
      item.status = 'approved';
    } else if (decision === 'reject') {
      item.status = 'rejected';
    }

    await item.save();

    return res.status(200).json({ success: true, message: `Item ${decision}d successfully.` });
  } catch (error) {
    console.error('Error updating item status:', error);
    return res.status(500).json({ success: false, message: 'Failed to update item status.' });
  }
});

================
File: src/pages/api/admin/submissions/index.js
================
// src/pages/api/admin/submissions/index.js

import dbConnect from '../../../../lib/mongoose';
import Item from '../../../../models/Item';
import { withAdmin } from '../../../../lib/withAdmin';
import { rateLimiter } from '../../../../middleware/rateLimit';
import { runMiddleware } from '../../../../lib/runMiddleware';

export default withAdmin(async function handler(req, res) {
  if (req.method === 'GET') {
    // Apply Rate Limiting
    await runMiddleware(req, res, rateLimiter({
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // Limit each IP to 100 requests per windowMs
      message: 'Too many requests from this IP, please try again after 15 minutes.',
    }));

    try {
      const pendingItems = await Item.find({ status: 'pending' }).lean();
      return res.status(200).json({ success: true, data: pendingItems });
    } catch (error) {
      console.error('Error fetching submissions:', error);
      return res.status(500).json({ success: false, message: 'Failed to fetch submissions.' });
    }
  } else {
    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
  }
});

================
File: src/pages/api/auth/[...nextauth].js
================
// src/pages/api/auth/[...nextauth].js

import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { MongoDBAdapter } from "@next-auth/mongodb-adapter";
import clientPromise from "../../../lib/mongodb";
import User from "../../../models/User";
import bcrypt from "bcryptjs";
import dbConnect from "../../../lib/mongoose";

export const authOptions = {
  providers: [
    // Credentials Provider
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text", placeholder: "john_doe" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        // Connect to database
        await dbConnect();

        // Find user by username
        const user = await User.findOne({ username: credentials.username });

        if (!user) {
          throw new Error("No user found with the given username");
        }

        // Check if password is correct
        const isValid = await bcrypt.compare(credentials.password, user.password);

        if (!isValid) {
          throw new Error("Invalid password");
        }

        // Return user object
        return {
          id: user._id.toString(),
          name: user.username,
          email: user.email,
          role: user.role, // Include role
        };
      },
    }),
    // Additional providers can be added here
  ],
  adapter: MongoDBAdapter(clientPromise),
  secret: process.env.NEXTAUTH_SECRET,
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async session({ session, token }) {
      // Add user ID and role to session
      session.user.id = token.sub;
      session.user.role = token.role;
      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.sub = user.id;
        token.role = user.role; // Add role to token
      }
      return token;
    },
  },
  pages: {
    signIn: '/auth/signin',
    // Add more custom pages if needed
  },
};

export default NextAuth(authOptions);

================
File: src/pages/api/auth/register.js
================
// src/pages/api/auth/register.js

import dbConnect from "../../../lib/mongoose";
import User from "../../../models/User";
import bcrypt from "bcryptjs";
import validator from "validator";

export default async function handler(req, res) {
  const { method } = req;

  await dbConnect();

  switch (method) {
    case "POST":
      try {
        const { username, email, password } = req.body;

        // Validate input
        if (!username || !email || !password) {
          return res.status(400).json({ success: false, message: "All fields are required." });
        }

        // Check if username exists
        const existingUser = await User.findOne({ username });
        if (existingUser) {
          return res.status(400).json({ success: false, message: "Username already taken." });
        }

        // Check if email exists
        const existingEmail = await User.findOne({ email });
        if (existingEmail) {
          return res.status(400).json({ success: false, message: "Email already in use." });
        }

        // Validate email
        if (!validator.isEmail(email)) {
          return res.status(400).json({ success: false, message: "Invalid email format." });
        }

        // Validate username (e.g., alphanumeric and underscores, 3-30 characters)
        if (!validator.isAlphanumeric(username.replace(/_/g, "")) || !validator.isLength(username, { min: 3, max: 30 })) {
          return res.status(400).json({ success: false, message: "Invalid username. Use 3-30 alphanumeric characters or underscores." });
        }

        // Validate password strength
        if (!validator.isStrongPassword(password, { minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1 })) {
          return res.status(400).json({ success: false, message: "Password is not strong enough." });
        }

        // Hash password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // Create user
        const user = await User.create({
          username,
          email,
          password: hashedPassword,
        });

        res.status(201).json({ success: true, data: user });
      } catch (error) {
        res.status(400).json({ success: false, message: error.message });
      }
      break;

    default:
      res.setHeader("Allow", ["POST"]);
      res.status(405).end(`Method ${method} Not Allowed`);
  }
}

================
File: src/pages/api/items/[id]/hasVoted.js
================
// src/pages/api/items/[id]/hasVoted.js

import { getSession } from "next-auth/react";
import dbConnect from "../../../../lib/mongoose";
import Vote from "../../../../models/Vote";

export default async function handler(req, res) {
  const { id } = req.query;

  if (req.method !== 'GET') {
    res.setHeader('Allow', ['GET']);
    return res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
  }

  try {
    await dbConnect();

    // Get user session
    const session = await getSession({ req });

    // Get user's IP address
    const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    let voteCriteria = { item: id, week: getWeekNumber(new Date()), ipAddress };

    if (session) {
      // Authenticated user
      voteCriteria.user = session.user.id;
    } else {
      // Unauthenticated user
      // You might need to get anonymousId and fingerprint from cookies or request headers
      const anonymousId = req.cookies.anonymousId;
      const sessionId = req.cookies.sessionId;
      const fingerprint = req.body.fingerprint; // Ensure fingerprint is sent in the request body or headers

      voteCriteria.anonymousId = anonymousId;
      voteCriteria.sessionId = sessionId;
      voteCriteria.fingerprint = fingerprint;
    }

    const existingVote = await Vote.findOne(voteCriteria);

    if (existingVote) {
      return res.status(200).json({ hasVoted: true });
    } else {
      return res.status(200).json({ hasVoted: false });
    }
  } catch (error) {
    console.error('Error checking vote status:', error);
    res.status(500).json({ success: false, message: 'Failed to check vote status.' });
  }
}

function getWeekNumber(d) {
  const oneJan = new Date(d.getFullYear(), 0, 1);
  const numberOfDays = Math.floor((d - oneJan) / (24 * 60 * 60 * 1000));
  return Math.ceil((numberOfDays + oneJan.getDay() + 1) / 7);
}

================
File: src/pages/api/items/[id]/vote.js
================
// src/pages/api/items/[id]/vote.js

import { getSession } from "next-auth/react";
import dbConnect from "../../../../lib/mongoose";
import Item from "../../../../models/Item";
import Vote from "../../../../models/Vote";
import { rateLimiter } from "../../../../middleware/rateLimit";
import { runMiddleware } from "../../../../lib/runMiddleware";
import { ensureAnonymousId } from "../../../../middleware/ensureAnonymousId";
import { ensureSessionId } from "../../../../middleware/ensureSessionId";

export default async function handler(req, res) {
  const { method } = req;
  const { id } = req.query;

  // Apply Rate Limiting
  await runMiddleware(req, res, rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes.',
  }));

  if (method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    res.status(405).json({ success: false, message: `Method ${method} Not Allowed` });
    return;
  }

  try {
    // Connect to database
    await dbConnect();

    // Find the item by ID
    const item = await Item.findById(id);

    if (!item) {
      return res.status(404).json({ success: false, message: "Item not found." });
    }

    // Get user session
    const session = await getSession({ req });

    // Get user's IP address
    const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    let voteCriteria = { item: id, week: getWeekNumber(new Date()), ipAddress };

    if (session) {
      // Authenticated user
      voteCriteria.user = session.user.id;
    } else {
      // Unauthenticated user
      const anonymousId = await ensureAnonymousId(req, res);
      const sessionId = await ensureSessionId(req, res);
      voteCriteria.anonymousId = anonymousId;
      voteCriteria.sessionId = sessionId;
      // Removed fingerprint usage as it's no longer associated with reCAPTCHA
      // If fingerprinting is still required for other purposes, you can retain it
      // For example:
      // const fingerprint = req.body.fingerprint;
      // voteCriteria.fingerprint = fingerprint;
    }

    // Check if a vote already exists
    const existingVote = await Vote.findOne(voteCriteria);

    if (existingVote) {
      return res.status(400).json({ success: false, message: "You have already voted for this item this week." });
    }

    // Increment the vote count
    item.votes += 1;
    await item.save();

    // Create a new vote record
    await Vote.create(voteCriteria);

    res.status(200).json({ success: true, data: { votes: item.votes }, message: "Vote registered successfully!" });
  } catch (error) {
    console.error("Error voting:", error);
    res.status(500).json({ success: false, message: "An error occurred while processing your vote." });
  }
}

function getWeekNumber(d) {
  const oneJan = new Date(d.getFullYear(), 0, 1);
  const numberOfDays = Math.floor((d - oneJan) / (24 * 60 * 60 * 1000));
  return Math.ceil((numberOfDays + oneJan.getDay() + 1) / 7);
}

================
File: src/pages/api/items/index.js
================
// src/pages/api/items/index.js

import dbConnect from '../../../lib/mongoose';
import Item from '../../../models/Item';

export default async function handler(req, res) {
  const { method, query } = req;

  await dbConnect();

  switch (method) {
    case 'GET':
      try {
        const { status, type, gender, price, style } = query;

        // Build the filter object
        let filter = {};

        if (status) {
          filter.status = status;
        }

        if (type) {
          filter.type = type;
        }

        if (gender) {
          filter.gender = gender;
        }

        if (price) {
          filter.price = price;
        }

        if (style) {
          filter.style = style;
        }

        const items = await Item.find(filter).sort({ votes: -1 }).lean();
        res.status(200).json({ success: true, data: items });
      } catch (error) {
        console.error('Error fetching items:', error);
        res.status(400).json({ success: false, message: 'Failed to fetch items.' });
      }
      break;

    default:
      res.setHeader('Allow', ['GET']);
      res.status(405).end(`Method ${method} Not Allowed`);
  }
}

================
File: src/pages/api/items/submit.js
================
// src/pages/api/items/submit.js

import dbConnect from '../../../lib/mongoose';
import Item from '../../../models/Item';
import { getSession } from 'next-auth/react';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { rateLimiter } from '../../../middleware/rateLimit';
import { runMiddleware } from '../../../lib/runMiddleware';
import { upload } from '../../../lib/multerConfig';

export const config = {
  api: {
    bodyParser: false, // Disables Next.js's default body parser
  },
};

export default async function handler(req, res) {
  // Apply Rate Limiting
  await runMiddleware(req, res, rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes.',
  }));

  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    res.status(405).json({ success: false, message: `Method ${req.method} Not Allowed` });
    return;
  }

  // Apply Multer Middleware
  await runMiddleware(req, res, upload.single('image'));

  try {
    // Connect to MongoDB
    await dbConnect();

    // Get user session
    const session = await getSession({ req });

    if (!session) {
      res.status(401).json({ success: false, message: 'You must be signed in to submit items.' });
      return;
    }

    const { name, description, links } = req.body;
    const file = req.file;

    // Validate input
    if (!name || !description || !links || !file) {
      res.status(400).json({ success: false, message: 'All fields are required.' });
      return;
    }

    // Parse links (assuming comma-separated)
    const linksArray = links.split(',').map(link => link.trim()).filter(link => link);

    if (linksArray.length === 0) {
      res.status(400).json({ success: false, message: 'At least one purchase link is required.' });
      return;
    }

    // Initialize S3 client for DigitalOcean Spaces
    const s3 = new S3Client({
      region: process.env.DO_SPACE_REGION,
      endpoint: process.env.DO_SPACE_ENDPOINT, // e.g., https://nyc3.digitaloceanspaces.com
      credentials: {
        accessKeyId: process.env.DO_SPACE_ACCESS_KEY_ID,
        secretAccessKey: process.env.DO_SPACE_SECRET_ACCESS_KEY,
      },
    });

    // Generate a unique filename
    const fileExtension = path.extname(file.originalname);
    const uniqueFileName = `clothing-app/${uuidv4()}${fileExtension}`;

    // Upload to DigitalOcean Space
    const uploadParams = {
      Bucket: process.env.DO_SPACE_NAME,
      Key: uniqueFileName,
      Body: file.buffer,
      ContentType: file.mimetype,
      ACL: 'public-read', // Makes the file publicly readable
    };

    await s3.send(new PutObjectCommand(uploadParams));

    // Construct the CDN URL
    const imageUrl = `${process.env.NEXT_PUBLIC_DO_CDN_URL}/${uniqueFileName}`;

    // Create new item with status 'pending' and without affiliateLink
    const newItem = await Item.create({
      name,
      description,
      image: imageUrl,
      links: linksArray,
      // affiliateLink is omitted; admin will add it upon approval
      status: 'pending',
    });

    res.status(201).json({
      success: true,
      data: newItem,
      message: 'Item submitted successfully and is pending approval.',
    });
  } catch (error) {
    console.error('Error in submit API:', error);
    res.status(400).json({ success: false, message: error.message });
  }
}

================
File: src/pages/api/wardrobe/[itemId].js
================
// src/pages/api/wardrobe/[itemId].js

import dbConnect from '../../../lib/mongoose';
import User from '../../../models/User';
import Item from '../../../models/Item';
import { getServerSession } from "next-auth/next";
import { authOptions } from "../../api/auth/[...nextauth]";
import { rateLimiter } from '../../../middleware/rateLimit';
import { runMiddleware } from '../../../lib/runMiddleware';

export default async function handler(req, res) {
  const { method } = req;
  const { itemId } = req.query;

  // Apply Rate Limiting
  await runMiddleware(
    req,
    res,
    rateLimiter({
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // Limit each IP to 100 requests per windowMs
      message: 'Too many requests from this IP, please try again after 15 minutes.',
    })
  );

  // Get user session using getServerSession
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return res.status(401).json({ success: false, message: 'Unauthorized' });
  }

  await dbConnect();

  switch (method) {
    case 'DELETE':
      try {
        // Verify that the item exists and is in the user's wardrobe
        const user = await User.findById(session.user.id);

        if (!user) {
          return res.status(404).json({ success: false, message: 'User not found.' });
        }

        if (!user.wardrobe.includes(itemId)) {
          return res.status(400).json({ success: false, message: 'Item not in wardrobe.' });
        }

        // Remove the item from the wardrobe
        user.wardrobe = user.wardrobe.filter(id => id.toString() !== itemId);
        await user.save();

        return res.status(200).json({ success: true, message: 'Item removed from wardrobe.' });
      } catch (error) {
        console.error('Error removing from wardrobe:', error);
        return res.status(500).json({ success: false, message: 'Failed to remove item from wardrobe.' });
      }

    default:
      res.setHeader('Allow', ['DELETE']);
      return res.status(405).json({ success: false, message: `Method ${method} Not Allowed` });
  }
}

================
File: src/pages/api/wardrobe/index.js
================
// src/pages/api/wardrobe/index.js

import dbConnect from '../../../lib/mongoose';
import User from '../../../models/User';
import Item from '../../../models/Item';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]';
import { rateLimiter } from '../../../middleware/rateLimit';
import { runMiddleware } from '../../../lib/runMiddleware';

export default async function handler(req, res) {
  const { method } = req;

  // Apply Rate Limiting
  await runMiddleware(
    req,
    res,
    rateLimiter({
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // Limit each IP to 100 requests per windowMs
      message: 'Too many requests from this IP, please try again after 15 minutes.',
    })
  );

  // Get user session using getServerSession
  const session = await getServerSession(req, res, authOptions);

  if (!session) {
    return res.status(401).json({ success: false, message: 'Unauthorized' });
  }

  await dbConnect();

  switch (method) {
    case 'GET':
      try {
        // Fetch the user's wardrobe items
        const user = await User.findById(session.user.id).populate('wardrobe').lean();

        if (!user) {
          return res.status(404).json({ success: false, message: 'User not found.' });
        }

        const wardrobeItems = (user.wardrobe || []).map((item) => ({
          ...item,
          _id: item._id.toString(),
          createdAt: item.createdAt ? item.createdAt.toISOString() : null,
          updatedAt: item.updatedAt ? item.updatedAt.toISOString() : null,
        }));

        return res.status(200).json({ success: true, data: wardrobeItems });
      } catch (error) {
        console.error('Error fetching wardrobe:', error);
        return res.status(500).json({ success: false, message: 'Failed to fetch wardrobe.' });
      }

    case 'POST':
      try {
        const { itemId } = req.body;

        if (!itemId) {
          return res.status(400).json({ success: false, message: 'Item ID is required.' });
        }

        // Validate that the item exists and is approved
        const item = await Item.findById(itemId);

        if (!item) {
          return res.status(404).json({ success: false, message: 'Item not found.' });
        }

        if (item.status !== 'approved') {
          return res.status(400).json({ success: false, message: 'Only approved items can be added to wardrobe.' });
        }

        // Fetch the user
        const user = await User.findById(session.user.id);

        if (!user) {
          return res.status(404).json({ success: false, message: 'User not found.' });
        }

        // Check if the item is already in the wardrobe
        if (user.wardrobe.includes(itemId)) {
          return res.status(400).json({ success: false, message: 'Item is already in your wardrobe.' });
        }

        // Add the item to the wardrobe
        user.wardrobe.push(itemId);
        await user.save();

        return res.status(200).json({ success: true, message: 'Item added to wardrobe.' });
      } catch (error) {
        console.error('Error adding item to wardrobe:', error);
        return res.status(500).json({ success: false, message: 'Failed to add item to wardrobe.' });
      }

    default:
      res.setHeader('Allow', ['GET', 'POST']);
      return res.status(405).json({ success: false, message: `Method ${method} Not Allowed` });
  }
}

================
File: src/pages/auth/signin.js
================
// src/pages/auth/signin.js

import { signIn } from "next-auth/react";
import { useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Link from "next/link";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

function SignInPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    username: "",
    password: "",
  });
  const [error, setError] = useState("");

  const { username, password } = formData;

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    setError("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Simple front-end validation
    if (!username || !password) {
      setError("All fields are required.");
      toast.error("All fields are required.");
      return;
    }

    // Sign in using Credentials Provider
    const res = await signIn("credentials", {
      redirect: false,
      username,
      password,
    });

    if (res.error) {
      setError(res.error);
      toast.error(res.error);
    } else {
      toast.success("Signed in successfully!");
      router.push("/");
    }
  };

  return (
    <>
      <Head>
        <title>Sign In | Trending Clothing</title>
      </Head>
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <div className="bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-filter backdrop-blur-md p-8 rounded-lg shadow-lg w-full max-w-md transition-colors duration-300">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 text-center transition-colors duration-300">Sign In</h2>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          {/* Credentials Sign-In Form */}
          <form onSubmit={handleSubmit} className="mb-6">
            <div className="mb-4">
              <label htmlFor="username" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Username
              </label>
              <input
                type="text"
                name="username"
                id="username"
                value={username}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="john_doe"
                required
              />
            </div>
            <div className="mb-6">
              <label htmlFor="password" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Password
              </label>
              <input
                type="password"
                name="password"
                id="password"
                value={password}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="********"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-blue-500 dark:bg-blue-700 hover:bg-blue-600 dark:hover:bg-blue-800 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300"
            >
              Sign In
            </button>
          </form>

          {/* Remove OAuth Providers Section */}

          <p className="mt-6 text-gray-700 dark:text-gray-300 text-center transition-colors duration-300">
            Don&apos;t have an account?{" "}
            <Link href="/register" className="text-blue-400 dark:text-blue-600 hover:text-blue-600 dark:hover:text-blue-700 underline transition-colors duration-300">
                Register
            </Link>
          </p>
        </div>
        <ToastContainer />
      </div>
    </>
  );
}

export default SignInPage;

================
File: src/pages/item/[id].js
================
// src/pages/item/[id].js

import { useState, useEffect, useRef } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Image from "next/image";
import dbConnect from "../../lib/mongoose";
import Item from "../../models/Item";
import Head from "next/head";
import Link from "next/link";
import { ToastContainer, toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import FingerprintJS from '@fingerprintjs/fingerprintjs';
// Removed: import ReCAPTCHA from 'react-google-recaptcha';

function ItemDetailPage({ item }) {
  const router = useRouter();
  const { data: session, status } = useSession();
  const isAuthenticated = status === "authenticated";
  const [inWardrobe, setInWardrobe] = useState(false);
  const [wardrobeLoading, setWardrobeLoading] = useState(false);
  const [votes, setVotes] = useState(item.votes);
  const [isVoting, setIsVoting] = useState(false);
  const [fingerprint, setFingerprint] = useState(null);
  // Removed: const [captchaToken, setCaptchaToken] = useState(null);
  // Removed: const recaptchaRef = useRef(null);

  useEffect(() => {
    if (isAuthenticated) {
      // Fetch the user's wardrobe to check if the item is already there
      const fetchWardrobe = async () => {
        try {
          const res = await fetch('/api/wardrobe');
          const data = await res.json();
          if (res.ok) {
            const wardrobeIds = data.data.map(wItem => wItem._id);
            setInWardrobe(wardrobeIds.includes(item._id));
          }
        } catch (error) {
          console.error("Error fetching wardrobe:", error);
        }
      };
      fetchWardrobe();
    } else {
      setInWardrobe(false);
    }

    // Initialize FingerprintJS
    FingerprintJS.load().then(fp => fp.get()).then(result => {
      setFingerprint(result.visitorId);
    });
  }, [isAuthenticated, item._id]);

  const handleWardrobeToggle = async () => {
    if (!isAuthenticated) {
      toast.error("You must be signed in to manage your wardrobe.");
      return;
    }

    setWardrobeLoading(true);

    try {
      if (inWardrobe) {
        // Remove from wardrobe
        const res = await fetch(`/api/wardrobe/${item._id}`, {
          method: 'DELETE',
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(false);
          toast.success(data.message || 'Item removed from wardrobe.');
        } else {
          toast.error(data.message || 'Failed to remove item.');
        }
      } else {
        // Add to wardrobe
        const res = await fetch('/api/wardrobe', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ itemId: item._id }),
        });

        const data = await res.json();

        if (res.ok) {
          setInWardrobe(true);
          toast.success(data.message || 'Item added to wardrobe.');
        } else {
          toast.error(data.message || 'Failed to add item.');
        }
      }
    } catch (error) {
      console.error("Error toggling wardrobe:", error);
      toast.error('An error occurred. Please try again.');
    } finally {
      setWardrobeLoading(false);
    }
  };

  const handleVote = async () => {
    if (isVoting) return;

    setIsVoting(true);

    try {
      // Removed reCAPTCHA logic
      // const token = await recaptchaRef.current.executeAsync();
      // setCaptchaToken(token);
      // recaptchaRef.current.reset();

      const payload = {
        ...(isAuthenticated ? {} : {}),
        ...(fingerprint ? { fingerprint } : {}),
      };

      const res = await fetch(`/api/items/${item._id}/vote`, {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const { success, data, message } = await res.json();

      if (success) {
        setVotes(data.votes);
        toast.success('Vote registered successfully!');
      } else {
        toast.error(message || 'Failed to vote.');
      }
    } catch (error) {
      console.error("Error voting:", error);
      toast.error("An error occurred while voting. Please try again.");
    } finally {
      setIsVoting(false);
    }
  };

  if (!item) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-dark-gradient text-gray-300">
        <p className="text-xl mb-4">Item not found</p>
        <button
          onClick={() => router.push("/")}
          className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg"
        >
          Go Back Home
        </button>
      </div>
    );
  }

  const handleBack = () => {
    router.back();
  };

  return (
    <>
      {/* Removed reCAPTCHA component */}
      <Head>
        <title>{item.name} | Trending Clothing</title>
        <meta name="description" content={item.description} />
      </Head>
      <div className="item-detail-page max-w-3xl mx-auto p-4">
        {/* Back Button */}
        <button
          onClick={handleBack}
          className="mb-4 text-blue-500 hover:text-blue-700 underline"
        >
          &larr; Back
        </button>

        <h1 className="text-3xl font-bold mb-4">{item.name}</h1>
        <div className="relative w-full h-96 mb-4">
          <Image
            src={item.image}
            alt={item.name}
            fill
            className="object-cover rounded"
            sizes="(max-width: 768px) 100vw,
                   (max-width: 1200px) 50vw,
                   33vw"
            priority // Ensures this image loads quickly
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/fallback-image.png';
            }}
          />
        </div>
        <p className="text-gray-300 mb-4">{votes} votes</p>
        {/* Affiliate link */}
        <a
          href={item.affiliateLink}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-400 hover:text-blue-600 underline"
        >
          Buy Now
        </a>

        {/* Vote Button */}
        <div className="mt-4">
          <button
            onClick={handleVote}
            disabled={isVoting}
            className={`bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors duration-200 ${
              isVoting ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
            }`}
            aria-label={isVoting ? "Voting" : "Upvote"}
          >
            {isVoting ? "Voting..." : "Upvote"}
          </button>
          <span className="ml-3 text-lg text-gray-300">{votes} votes</span>
        </div>

        {/* Wardrobe Button */}
        <div className="mt-4">
          <button
            onClick={handleWardrobeToggle}
            disabled={wardrobeLoading}
            className={`bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200 ${
              wardrobeLoading ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
            }`}
            aria-label={inWardrobe ? "Remove from Wardrobe" : "Add to Wardrobe"}
          >
            {wardrobeLoading ? "Processing..." : inWardrobe ? "Remove from Wardrobe" : "Add to Wardrobe"}
          </button>
        </div>
        <ToastContainer />
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const { id } = context.params;

  await dbConnect();

  try {
    const item = await Item.findById(id).lean();

    if (!item) {
      return {
        props: { item: null },
      };
    }

    // Convert Mongoose _id and Date fields to strings
    item._id = item._id.toString();
    item.createdAt = item.createdAt.toISOString();
    item.updatedAt = item.updatedAt.toISOString();
    // Repeat for any other Date fields if present

    return {
      props: { item },
    };
  } catch (error) {
    console.error("Error fetching item:", error);
    return {
      props: { item: null },
    };
  }
}

export default ItemDetailPage;

================
File: src/pages/_app.js
================
// src/pages/_app.js

import "../styles/globals.css";
import { SessionProvider } from "next-auth/react";
import Navbar from "../components/Navbar";
import dynamic from "next/dynamic";
import { ThemeProvider } from "next-themes";

const Footer = dynamic(() => import("../components/Footer"), { ssr: false });

function MyApp({ Component, pageProps: { session, ...pageProps } }) {
  return (
    <SessionProvider session={session}>
      <ThemeProvider attribute="class" defaultTheme="system" enableSystem={true}>
        <div className="flex flex-col min-h-screen bg-light-gradient dark:bg-dark-gradient transition-colors duration-500">
          <Navbar />
          <main className="flex-grow">
            <Component {...pageProps} />
          </main>
          <Footer />
        </div>
      </ThemeProvider>
    </SessionProvider>
  );
}

export default MyApp;

================
File: src/pages/about.js
================
// src/pages/about.js

import Head from "next/head";

function About() {
  return (
    <>
      <Head>
        <title>About Us | Trending Clothing</title>
      </Head>
      <div className="max-w-6xl mx-auto p-8 text-gray-300">
        <h1 className="text-3xl font-bold mb-4">About Us</h1>
        <p className="mb-4">
          {/* Add your About Us content here */}
          Trending Clothing is dedicated to showcasing the latest and most popular clothing items from around the world. Our mission is to connect fashion enthusiasts with trending products that suit their style and preferences.
        </p>
        {/* Continue with sections about your company, mission, vision, team, etc. */}
      </div>
    </>
  );
}

export default About;

================
File: src/pages/contact.js
================
// src/pages/contact.js

import Head from "next/head";

function ContactUs() {
  return (
    <>
      <Head>
        <title>Contact Us | Trending Clothing</title>
      </Head>
      <div className="max-w-6xl mx-auto p-8 text-gray-300">
        <h1 className="text-3xl font-bold mb-4">Contact Us</h1>
        <p className="mb-4">
          {/* Add your Contact Us content here */}
          If you have any questions, concerns, or feedback, please feel free to reach out to us at:
        </p>
        <ul className="list-disc list-inside mb-4">
          <li>Email: support@trendingclothing.com</li>
          <li>Phone: +1 (234) 567-8901</li>
          <li>Address: 123 Fashion Ave, New York, NY 10001</li>
        </ul>
        {/* Optionally, add a contact form */}
      </div>
    </>
  );
}

export default ContactUs;

================
File: src/pages/cookie-policy.js
================
// src/pages/cookie-policy.js

import Head from "next/head";
import Link from "next/link";

function CookiePolicy() {
  return (
    <>
      <Head>
        <title>Cookie Policy | Trending Clothing</title>
      </Head>
      <div className="max-w-6xl mx-auto p-8 text-gray-300">
        <h1 className="text-3xl font-bold mb-4">Cookie Policy</h1>
        <p className="mb-4">
          {/* Add your Cookie Policy content here */}
          This Cookie Policy explains how Trending Clothing uses cookies and similar technologies to recognize you when you visit our website.
        </p>
        {/* Continue with sections like What Are Cookies, How We Use Cookies, Your Choices, etc. */}
      </div>
    </>
  );
}

export default CookiePolicy;

================
File: src/pages/index.js
================
// src/pages/index.js

import { useState, useEffect } from "react";
import ItemCard from "../components/ItemCard";
import { useSession } from "next-auth/react";

function HomePage() {
  const [items, setItems] = useState([]);
  const { data: session, status } = useSession();
  const isAuthenticated = status === "authenticated";
  const [wardrobeIds, setWardrobeIds] = useState([]);

  // New state variables for filters
  const [typeFilter, setTypeFilter] = useState('');
  const [genderFilter, setGenderFilter] = useState('');
  const [priceFilter, setPriceFilter] = useState('');
  const [styleFilter, setStyleFilter] = useState('');
  const [searchTerm, setSearchTerm] = useState(''); // Added searchTerm

  // Fetch items from the backend
  useEffect(() => {
    const fetchItems = async () => {
      try {
        let query = '/api/items?status=approved';

        // Append filters to query if set
        if (typeFilter) query += `&type=${encodeURIComponent(typeFilter)}`;
        if (genderFilter) query += `&gender=${encodeURIComponent(genderFilter)}`;
        if (priceFilter) query += `&price=${encodeURIComponent(priceFilter)}`;
        if (styleFilter) query += `&style=${encodeURIComponent(styleFilter)}`;

        // Append search term if set
        if (searchTerm) query += `&search=${encodeURIComponent(searchTerm)}`;

        const res = await fetch(query);
        const { success, data } = await res.json();
        if (success) {
          // Sort items by votes in descending order
          const sortedItems = data.sort((a, b) => b.votes - a.votes);
          setItems(sortedItems);
          // No need to setFilteredItems if the API handles filtering
        } else {
          console.error("Failed to fetch items.");
        }
      } catch (error) {
        console.error("Error fetching items:", error);
      }
    };

    fetchItems();
  }, [typeFilter, genderFilter, priceFilter, styleFilter, searchTerm]);

  // Fetch wardrobe once
  useEffect(() => {
    if (isAuthenticated) {
      const fetchWardrobe = async () => {
        try {
          const res = await fetch('/api/wardrobe');
          const data = await res.json();
          if (res.ok && Array.isArray(data.data)) {
            const wardrobeItemIds = data.data.map(wItem => wItem._id);
            setWardrobeIds(wardrobeItemIds);
          } else {
            console.error("Invalid data structure from wardrobe API:", data);
            setWardrobeIds([]);
          }
        } catch (error) {
          console.error("Error fetching wardrobe:", error);
          setWardrobeIds([]);
        }
      };
      fetchWardrobe();
    } else {
      setWardrobeIds([]);
    }
  }, [isAuthenticated]);

  // Handle reset filters
  const resetFilters = () => {
    setTypeFilter('');
    setGenderFilter('');
    setPriceFilter('');
    setStyleFilter('');
    setSearchTerm(''); // Reset searchTerm
  };

  return (
    <div className="home-page flex flex-col items-center p-4 min-h-screen">
      {/* Search and Filter Bar */}
      <div className="w-full max-w-6xl mb-6 flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4">
        {/* Search Input */}
        <input
          type="text"
          placeholder="Search for items..."
          value={searchTerm} // Bind to searchTerm state
          onChange={(e) => setSearchTerm(e.target.value)} // Update searchTerm on input
          className="flex-grow px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
        />

        {/* Type Filter */}
        <select
          value={typeFilter}
          onChange={(e) => setTypeFilter(e.target.value)}
          className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
        >
          <option value="">All Types</option>
          <option value="Shirt">Shirt</option>
          <option value="Pants">Pants</option>
          <option value="Jacket">Jacket</option>
          <option value="Dress">Dress</option>
          <option value="Shoes">Shoes</option>
          <option value="Accessories">Accessories</option>
        </select>

        {/* Gender Filter */}
        <select
          value={genderFilter}
          onChange={(e) => setGenderFilter(e.target.value)}
          className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
        >
          <option value="">All Genders</option>
          <option value="Male">Male</option>
          <option value="Female">Female</option>
          <option value="Unisex">Unisex</option>
        </select>

        {/* Price Filter */}
        <select
          value={priceFilter}
          onChange={(e) => setPriceFilter(e.target.value)}
          className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
        >
          <option value="">All Prices</option>
          <option value="Under $50">Under $50</option>
          <option value="$50-$100">$50-$100</option>
          <option value="Over $100">Over $100</option>
        </select>

        {/* Style Filter */}
        <select
          value={styleFilter}
          onChange={(e) => setStyleFilter(e.target.value)}
          className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
        >
          <option value="">All Styles</option>
          <option value="Casual">Casual</option>
          <option value="Formal">Formal</option>
          <option value="Sport">Sport</option>
          <option value="Vintage">Vintage</option>
          <option value="Streetwear">Streetwear</option>
        </select>

        {/* Reset Filters Button */}
        <button
          onClick={resetFilters}
          className="px-4 py-3 bg-gray-500 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors duration-300"
        >
          Reset
        </button>
      </div>

      {/* Items List */}
      {items.length > 0 ? (
        items.map((item, index) => (
          <ItemCard
            key={item._id}
            item={item}
            rank={index + 1} // Pass rank as index + 1
            searchTerm={searchTerm} // Pass the actual searchTerm
            wardrobeIds={wardrobeIds}
          />
        ))
      ) : (
        <p className="text-gray-300">No items found.</p>
      )}
    </div>
  );
}

export default HomePage;

================
File: src/pages/privacy.js
================
// src/pages/privacy.js

import Head from "next/head";
import Link from "next/link";

function PrivacyPolicy() {
  return (
    <>
      <Head>
        <title>Privacy Policy | Trending Clothing</title>
      </Head>
      <div className="max-w-6xl mx-auto p-8 text-gray-300">
        <h1 className="text-3xl font-bold mb-4">Privacy Policy</h1>
        <p className="mb-4">
          {/* Add your Privacy Policy content here */}
          Your privacy is important to us. This Privacy Policy outlines the types of personal information we collect, how we use it, and the choices you have regarding your information.
        </p>
        {/* Continue with sections like Data Collection, Data Usage, Data Sharing, etc. */}
      </div>
    </>
  );
}

export default PrivacyPolicy;

================
File: src/pages/register.js
================
// src/pages/register.js

import { useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function RegisterPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
  });
  const [error, setError] = useState('');

  const { username, email, password } = formData;

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Simple front-end validation
    if (!username || !email || !password) {
      setError("All fields are required.");
      toast.error("All fields are required.");
      return;
    }

    try {
      const res = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, email, password }),
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || 'Something went wrong.');
        toast.error(data.message || 'Something went wrong.');
      } else {
        toast.success('Registered successfully! Redirecting to sign in...');
        // Redirect after a short delay
        setTimeout(() => {
          router.push('/auth/signin');
        }, 2000);
      }
    } catch (err) {
      setError('Something went wrong.');
      toast.error('Something went wrong.');
    }
  };

  return (
    <>
      <Head>
        <title>Register | Trending Clothing</title>
      </Head>
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <div className="bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-filter backdrop-blur-md p-8 rounded-lg shadow-lg w-full max-w-md transition-colors duration-300">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 text-center transition-colors duration-300">Register</h2>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <form onSubmit={handleSubmit} className="mb-6">
            <div className="mb-4">
              <label htmlFor="username" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Username
              </label>
              <input
                type="text"
                name="username"
                id="username"
                value={username}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="john_doe"
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="email" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Email
              </label>
              <input
                type="email"
                name="email"
                id="email"
                value={email}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="john@example.com"
                required
              />
            </div>
            <div className="mb-6">
              <label htmlFor="password" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Password
              </label>
              <input
                type="password"
                name="password"
                id="password"
                value={password}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="********"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-green-500 dark:bg-green-700 hover:bg-green-600 dark:hover:bg-green-800 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300"
            >
              Register
            </button>
          </form>
          <p className="mt-6 text-gray-700 dark:text-gray-300 text-center transition-colors duration-300">
            Already have an account?{" "}
            <Link href="/auth/signin" className="text-blue-400 dark:text-blue-600 hover:text-blue-600 dark:hover:text-blue-700 underline transition-colors duration-300">
                Sign In
            </Link>
          </p>
        </div>
        <ToastContainer />
      </div>
    </>
  );
}

export default RegisterPage;

================
File: src/pages/submit.js
================
// src/pages/submit.js

import { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import FingerprintJS from '@fingerprintjs/fingerprintjs';

function SubmitItemPage() {
  const { data: session, status } = useSession();
  const isLoading = status === 'loading';
  const router = useRouter();

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    links: '',
    image: null,
  });

  const [error, setError] = useState('');
  const [fingerprint, setFingerprint] = useState(null);

  useEffect(() => {
    // Initialize FingerprintJS
    FingerprintJS.load().then(fp => fp.get()).then(result => {
      setFingerprint(result.visitorId);
    });
  }, []);

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      setFormData({ ...formData, image: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Front-end validation
    if (!formData.name || !formData.description || !formData.links || !formData.image) {
      setError('All fields are required.');
      toast.error('All fields are required.');
      return;
    }

    const form = new FormData();
    form.append('name', formData.name);
    form.append('description', formData.description);
    form.append('links', formData.links); // Comma-separated URLs
    form.append('image', formData.image);

    try {
      const res = await fetch('/api/items/submit', {
        method: 'POST',
        body: form,
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || 'Something went wrong.');
        toast.error(data.message || 'Something went wrong.');
      } else {
        toast.success(data.message || 'Item submitted successfully!');
        // Reset form
        setFormData({
          name: '',
          description: '',
          links: '',
          image: null,
        });
        // Redirect after a short delay
        setTimeout(() => {
          router.push('/');
        }, 2000);
      }
    } catch (err) {
      setError('Something went wrong.');
      toast.error('Something went wrong.');
    }
  };

  if (isLoading) {
    return <div className="text-center text-gray-300">Loading...</div>;
  }

  if (!session) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <p className="text-gray-700 dark:text-gray-300 mb-4">You must be signed in to submit items.</p>
        <Link href="/auth/signin">
          <a className="bg-blue-500 dark:bg-blue-700 hover:bg-blue-600 dark:hover:bg-blue-800 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">
            Sign In
          </a>
        </Link>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Submit Item | Trending Clothing</title>
      </Head>
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <div className="bg-white dark:bg-gray-800 bg-opacity-80 dark:bg-opacity-80 backdrop-filter backdrop-blur-md p-8 rounded-lg shadow-lg w-full max-w-lg transition-colors duration-300">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 text-center transition-colors duration-300">Submit a New Item</h2>
          {error && <p className="text-red-500 mb-4">{error}</p>}
          <form onSubmit={handleSubmit} encType="multipart/form-data">
            {/* Item Name */}
            <div className="mb-4">
              <label htmlFor="name" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Item Name
              </label>
              <input
                type="text"
                name="name"
                id="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="Stylish Jacket"
                required
              />
            </div>

            {/* Description */}
            <div className="mb-4">
              <label htmlFor="description" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Description
              </label>
              <textarea
                name="description"
                id="description"
                value={formData.description}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="Provide a detailed description of the item."
                rows="4"
                required
              ></textarea>
            </div>

            {/* Purchase Links */}
            <div className="mb-4">
              <label htmlFor="links" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Purchase Links (comma-separated)
              </label>
              <input
                type="text"
                name="links"
                id="links"
                value={formData.links}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                placeholder="https://store1.com/item, https://store2.com/item"
                required
              />
            </div>

            {/* Image Upload */}
            <div className="mb-6">
              <label htmlFor="image" className="block text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-300">
                Item Image
              </label>
              <input
                type="file"
                name="image"
                id="image"
                accept="image/*"
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100 transition-colors duration-300"
                required
              />
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full bg-green-500 dark:bg-green-700 hover:bg-green-600 dark:hover:bg-green-800 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300"
            >
              Submit Item
            </button>
          </form>
          <ToastContainer />
        </div>
      </div>
    </>
  );
}

export default SubmitItemPage;

================
File: src/pages/terms.js
================
// src/pages/terms.js

import Head from "next/head";
import Link from "next/link";

function TermsOfService() {
  return (
    <>
      <Head>
        <title>Terms of Service | Trending Clothing</title>
      </Head>
      <div className="max-w-6xl mx-auto p-8 text-gray-300">
        <h1 className="text-3xl font-bold mb-4">Terms of Service</h1>
        <p className="mb-4">
          {/* Add your Terms of Service content here */}
          By using the Trending Clothing application, you agree to comply with and be bound by the following terms and conditions.
        </p>
        {/* Continue with sections like User Responsibilities, Prohibited Activities, Termination, etc. */}
      </div>
    </>
  );
}

export default TermsOfService;

================
File: src/pages/wardrobe.js
================
// src/pages/wardrobe.js

import { useSession } from "next-auth/react";
import { getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]"; // Adjust the path as needed
import dbConnect from "../lib/mongoose";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import Head from "next/head";

function WardrobePage({ wardrobeItems }) {
  const { data: session, status } = useSession();
  const isLoading = status === "loading";
  const router = useRouter();
  const [wardrobe, setWardrobe] = useState(wardrobeItems);

  const handleRemove = async (itemId) => {
    if (!confirm('Are you sure you want to remove this item from your wardrobe?')) {
      return;
    }

    try {
      const res = await fetch(`/api/wardrobe/${itemId}`, {
        method: 'DELETE',
      });

      const data = await res.json();

      if (res.ok) {
        toast.success(data.message || 'Item removed successfully!');
        // Update the wardrobe state
        setWardrobe(wardrobe.filter(item => item._id !== itemId));
      } else {
        toast.error(data.message || 'Failed to remove item.');
      }
    } catch (error) {
      console.error("Error removing item from wardrobe:", error);
      toast.error('An error occurred while removing the item.');
    }
  };

  if (isLoading) {
    return <div className="text-center text-gray-300">Loading...</div>;
  }

  if (!session) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-dark-gradient">
        <p className="text-gray-300 mb-4">You must be signed in to view your wardrobe.</p>
        <Link href="/auth/signin" className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
            Sign In
        </Link>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>My Wardrobe | Trending Clothing</title>
      </Head>
      <div className="wardrobe-page flex flex-col items-center p-4 min-h-screen">
        <h1 className="text-3xl font-bold mb-6 text-white">My Wardrobe</h1>
        {wardrobe.length > 0 ? (
          wardrobe.map((item) => (
            <div key={item._id} className="wardrobe-item flex items-center bg-white bg-opacity-10 backdrop-filter backdrop-blur-md shadow-md rounded p-4 mb-4 w-full max-w-4xl">
              {/* Item Image */}
              <div className="relative w-24 h-24 flex-shrink-0">
                <Image src={item.image} alt={item.name} fill className="rounded object-cover" />
              </div>

              {/* Item Details */}
              <div className="ml-4 flex-grow">
                <Link href={`/item/${item._id}`} className="text-xl font-semibold text-white hover:underline">
                  {item.name}
                </Link>
                <p className="text-gray-300">{item.description}</p>
              </div>

              {/* Remove Button */}
              <div className="ml-4">
                <button
                  onClick={() => handleRemove(item._id)}
                  className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
                >
                  Remove
                </button>
              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-300">Your wardrobe is empty. Start adding some items!</p>
        )}
        <ToastContainer />
      </div>
    </>
  );
}

// Updated getServerSideProps
export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      props: { wardrobeItems: [] },
    };
  }

  await dbConnect();

  // Dynamically import User model to prevent client-side bundling
  const User = await import("../models/User").then((mod) => mod.default);

  try {
    const user = await User.findById(session.user.id).populate('wardrobe').lean();

    if (!user) {
      return {
        props: { wardrobeItems: [] },
      };
    }

    const wardrobeItems = (user.wardrobe || []).map((item) => ({
      ...item,
      _id: item._id.toString(),
      createdAt: item.createdAt ? item.createdAt.toISOString() : null,
      updatedAt: item.updatedAt ? item.updatedAt.toISOString() : null,
    }));

    return {
      props: { wardrobeItems },
    };
  } catch (error) {
    console.error('Error fetching wardrobe:', error);
    return {
      props: { wardrobeItems: [] },
    };
  }
}

export default WardrobePage;
